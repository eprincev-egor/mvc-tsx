{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./lib/Controller.ts","webpack:///./lib/DOMListener.ts","webpack:///./lib/Meta.ts","webpack:///./lib/Model.ts","webpack:///./lib/View.ts","webpack:///./lib/index.ts","webpack:///./lib/mvcEvents.ts","webpack:///./lib/utils/getNearestModelByEvent.ts","webpack:///./lib/utils/getPropertyFromEvent.ts","webpack:///./lib/utils/isValidTarget.ts","webpack:///external \"EventEmitterModule\"","webpack:///external \"React\"","webpack:///external \"ReactDOM\""],"names":[],"mappings":"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","file":"only-mvc.full.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"EventEmitterModule\"), require(\"React\"), require(\"ReactDOM\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"EventEmitterModule\", \"React\", \"ReactDOM\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"EventEmitterModule\"), require(\"React\"), require(\"ReactDOM\")) : factory(root[\"EventEmitterModule\"], root[\"React\"], root[\"ReactDOM\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE_events__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.ts\");\n","import { Model } from \"./Model\";\nimport { getListeners, isModelListener, findHandlerArguments } from \"./Meta\";\n\nexport abstract class Controller<TModel extends Model> {\n    protected model: Readonly<TModel>;\n    private modelListeners: any[] = [];\n    private dynamicListeners: any[] = [];\n\n    constructor(model: TModel) {\n        this.model = model;\n        this.initModelEvents();\n    }\n\n    private initModelEvents() {\n        const listeners = getListeners(this);\n        const modelListeners = listeners.filter(listener =>\n            isModelListener(listener)\n        );\n\n        for (const listener of modelListeners) {\n            const eventType = listener.eventType as any;\n            const handler = (...args: any[]) => {\n                listener.handler(...args);\n            };\n\n            this.modelListeners.push({\n                eventType,\n                handler\n            });\n            this.model.on(eventType, handler);\n        }\n    }\n\n    /**\n     * Attach handler to View DOM events like are click, or model events.\n     * @param eventType any DOM Event type\n     * @param selector \"model\" or simple class selector like are: \".my-class\". \n     * Selectors like are \".a .b .c\" does not supported.\n     */\n    on(\n        eventType: keyof HTMLElementEventMap,\n        selector: string,\n        handler: (...args: any[]) => void\n    ) {\n        const handlerArgs = findHandlerArguments(this, handler.name);\n        handler = handler.bind(this);\n        \n        this.dynamicListeners.push({\n            eventType,\n            selector,\n            handler,\n            handlerArgs\n        });\n    }\n\n    /**\n     * Destroy controller and clear memory.\n     * Detach all listeners.\n     */\n    destroy() {\n        this.onDestroy();\n        \n        for (const modelListener of this.modelListeners) {\n            this.model.removeListener(\n                modelListener.eventType, \n                modelListener.handler\n            );\n        }\n\n        delete this.model;\n    }\n\n    /**\n     * Detach listeners and fix any memory leaks.\n     * Should be any functions with clearing memory leaks.\n     * This method will be called from before .destroy()\n     */\n    onDestroy() {\n        // redefine me\n    }\n\n}","import * as ReactDOM from \"react-dom\";\nimport { View } from \"./View\";\nimport { Model } from \"./Model\";\nimport { isValidTarget } from \"./utils/isValidTarget\";\nimport { getPropertyFromEvent } from \"./utils/getPropertyFromEvent\";\nimport { getNearestModelByEvent } from \"./utils/getNearestModelByEvent\";\n\ntype TViewConstructor<TModel extends Model> = new (...args: any[]) => View<TModel>;\n\ninterface IDOMListenerParams {\n    eventType: keyof HTMLElementEventMap;\n    selector: string | TViewConstructor<any>;\n    handlerArgs: ( string[] | (new (...args: any[]) => Model))[];\n    handler: (...args: any[]) => void,\n    view: View<any>;\n}\n\nexport class DOMListener {\n    view: View<any>;\n    private realEventType: keyof HTMLElementEventMap;\n    private selector: string | TViewConstructor<any>;\n    private handlerArgs: ( string[] | (new (...args: any[]) => Model))[];\n    private handler: (...args: any[]) => void;\n    private domHandler!: (...args: any[]) => void;\n\n    constructor(params: IDOMListenerParams) {\n        this.realEventType = fixFocusAndBlur(params.eventType);\n        this.selector = params.selector;\n        this.handlerArgs = params.handlerArgs;\n        this.handler = params.handler;\n        this.view = params.view;\n\n    }\n\n    listen() {\n        this.domHandler = (event: Event) => {\n            this.onDOMEvent(event);\n        };\n        window.addEventListener(this.realEventType, this.domHandler);\n    }\n\n    destroy() {\n        window.removeEventListener(this.realEventType, this.domHandler);\n        delete this.view;\n        delete this.handler;\n        delete this.domHandler;\n        delete this.handlerArgs;\n    }\n\n    private onDOMEvent(event: Event) {\n        const componentEl = ReactDOM.findDOMNode(this.view) as any;\n\n        if ( this.isValidEvent(event, componentEl) ) {\n            const currentTarget = this.getCurrentTarget(event, componentEl);\n            const args = this.getHandlerArgs(event, currentTarget);\n            this.handler(...args);\n        }\n    }\n\n    private isValidEvent(event: Event, componentEl: HTMLElement): boolean {\n\n        const thisIsValidTarget = isValidTarget({\n            componentEl,\n            selector: this.selector,\n            target: event.target as any,\n        });\n\n        return thisIsValidTarget;\n    }\n\n    private getHandlerArgs(event: Event, currentTarget: HTMLElement | undefined) {\n        const args: any[] = this.handlerArgs.map((eventPropertyPath) => \n            this.getHandlerArgument(\n                event, \n                currentTarget, \n                eventPropertyPath\n            ) \n        );\n\n        return args;\n    }\n\n    private getHandlerArgument(\n        event: Event, \n        currentTarget: HTMLElement | undefined,\n        eventPropertyPath: string[] | (new (...args: any[]) => Model)\n    ) {\n        if ( typeof eventPropertyPath === \"function\" ) {\n            const ModelConstructor = eventPropertyPath;\n            const model = this.getHandlerArgumentByModel(event, ModelConstructor);\n            return model;\n        }\n        else {\n            const argValue = getPropertyFromEvent(\n                event,\n                currentTarget,\n                eventPropertyPath\n            );\n            return argValue;\n        }\n    }\n\n    private getHandlerArgumentByModel(\n        event: Event, \n        ModelConstructor: (new (...args: any[]) => Model)\n    ) {\n        const model = getNearestModelByEvent(event, ModelConstructor);\n        if ( !model ) {\n            throw new Error(\"cannot find model: \" + ModelConstructor.name);\n        }\n        return model;\n    }\n\n    private getCurrentTarget(event: Event, componentEl: HTMLElement): HTMLElement | undefined {\n        if ( typeof this.selector === \"function\" ) {\n            const currentTarget = componentEl;\n            return currentTarget;\n        }\n\n        let elem = event.target as HTMLElement | null;\n        const currentTargetClassName = this.selector.slice(1);\n\n        while ( elem ) {\n            const isCurrentTarget = (\n                elem.classList &&\n                elem.classList.contains(currentTargetClassName)\n            );\n            if ( isCurrentTarget ) {\n                return elem;\n            }\n\n            elem = elem.parentNode as HTMLElement;\n        }\n    }\n}\n\n\n// blur and focus do not bubbling\nfunction fixFocusAndBlur(eventType: keyof HTMLElementEventMap): keyof HTMLElementEventMap {\n    if ( eventType === \"blur\" ) {\n        return \"focusout\";\n    }\n\n    if ( eventType === \"focus\" ) {\n        return \"focusin\";\n    }\n\n    return eventType;\n}","import { Model } from \"./Model\";\nimport { Controller } from \"./Controller\";\nimport { View } from \"./View\";import { mvcEvents } from \"./mvcEvents\";\nimport { DOMListener } from \"./DOMListener\";\n\ntype TModelConstructor = new(...args: any[]) => Model;\n\nexport interface IHandlerArgs {\n    methodName: string;\n    argumentIndex: number;\n    eventPropertyPath: TModelConstructor | string[]\n}\n\nexport interface IListenerMeta {\n    eventType: string;\n    selector: string | TModelConstructor | TViewConstructor<any>;\n    methodName?: string;\n    handler?: (...args: any[]) => void;\n    handlerArgs?: HandlerArg[]; \n}\n\nexport type HandlerArg = string[] | TModelConstructor;\n\nexport interface IListener {\n    eventType: string;\n    selector: string | TModelConstructor | TViewConstructor<any>;\n    handlerArgs: HandlerArg[];\n    handler: (...args: any[]) => void;\n}\n\n/**\n * Attach handler to View DOM events like are click, or model events.\n * ```js\n * class MyController extends Controller<MyModel> {\n * \n *     // listen dom event\n *     *@on(\"click\", MyView.ui.button)\n *     onClickButton() {\n *         // some action\n *     }\n * \n * }\n * ```\n * @param eventTypeOrModel any DOM Event type or Model constructor\n * @param selectorOrViewOrModelEventType selector like are: \".my-class\" or model eventType  \n * Selectors like are \".a .b .c\" does not supported.\n */\nexport function on(\n    eventTypeOrModel: keyof HTMLElementEventMap | TModelConstructor, \n    selectorOrViewOrModelEventType: string | TViewConstructor<any>\n) {\n    let eventType!: string;\n    let selector!: string | TModelConstructor | TViewConstructor<any>;\n\n    const isInvalidCall = (\n        typeof eventTypeOrModel === \"function\" &&\n        typeof selectorOrViewOrModelEventType === \"function\"\n    );\n    if ( isInvalidCall ) {\n        throw new Error(\"invalid call, first argument and second cannot be a function at the same time\");\n    }\n\n\n    if ( typeof eventTypeOrModel === \"string\" ) {\n        eventType = eventTypeOrModel;\n        selector = selectorOrViewOrModelEventType;\n\n        if ( typeof selector === \"string\" ) {\n        \n            const selectorIsJustClassName = /^\\.[\\w-]+$/.test(selector);\n            const selectorIsWindow = selector === \"window\";\n            const isValidSelector = (\n                selectorIsJustClassName ||\n                selectorIsWindow\n            );\n    \n            if ( !isValidSelector ) {\n                throw new Error(`invalid selector \"${selector}\", selector should be just className like are \".some-class\" or \"window\"`);\n            }\n        }\n    }\n    else {\n        eventType = selectorOrViewOrModelEventType as string;\n        selector = eventTypeOrModel;\n    }\n\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\n\n        if ( !target._listenersMeta ) {\n            target._listenersMeta = [];\n        }\n        \n        const meta: IListenerMeta = {\n            eventType,\n            selector,\n            methodName\n        };\n        target._listenersMeta.push(meta);\n    };\n}\n\ntype KeyOfDOMEvent = (\n    keyof Event |\n    keyof MouseEvent |\n    keyof KeyboardEvent |\n    keyof DragEvent\n)\n/**\n * Get some value from event object or get nearest model from components\n * ```ts\n * class MyController extends Controller<MyModel> {\n * \n *     *@on(\"change\", MyView.ui.input)\n *     onChangeInput(\n *         // get changed input value:\n *         // event.target.value\n *         *@event(\"target\", \"value\") inputValue: string\n *     ) {\n *         // some action\n *     }\n * \n *     *@on(\"change\", MyView.ui.input)\n *     onChangeInput(\n *         // get full event object:\n *         *@event() e: Event\n *     ) {\n *         // some action\n *     }\n * \n *     *@on(\"click\", MyView.ui.childView)\n *      onClickChild(\n *         // get model from nearest view by event target\n *         *@event(ChildModel) child: ChildModel\n *      ) {\n *         // some action\n *      }\n * \n * }\n * ```\n * @param firstKey keyof dom event object\n * @param secondKey keyof Event[firstKey], next step in property path.\n * @param otherPropertyPath other keys\n */\nexport function event<T extends KeyOfDOMEvent | (new (...args: any[]) => Model)>(\n    firstKey?: T,\n    secondKey?: (\n        T extends keyof Event ?\n            (Event[T] extends Event[\"target\"] ? \n                keyof HTMLElement | keyof HTMLInputElement :\n                keyof Event[T]\n            ) :\n            never\n    ),\n    ...otherPropertyPath: string[]\n) {\n    return (target: any, methodName: string, argumentIndex: number) => {\n        if ( !target._handlersArguments ) {\n            target._handlersArguments = [];\n        }\n\n        const handlerArgs: IHandlerArgs = {\n            methodName,\n            argumentIndex,\n            eventPropertyPath: []\n        };\n\n        if ( !firstKey ) {\n            handlerArgs.eventPropertyPath = [];\n        }\n        else if ( typeof firstKey === \"string\" ) {\n            const propertyPath: string[] = [\n                firstKey as string\n            ];\n\n            if ( secondKey ) {\n                propertyPath.push(secondKey as string);\n            }\n            if ( otherPropertyPath.length ) {\n                propertyPath.push( ...otherPropertyPath );\n            }\n    \n            handlerArgs.eventPropertyPath = propertyPath;\n        }\n        else {\n            const ModelConstructor = firstKey as new (...args: any[]) => Model;\n            handlerArgs.eventPropertyPath = ModelConstructor;\n        }\n\n        target._handlersArguments.push(handlerArgs);\n        \n    };\n}\n\nexport function getListeners(controller: Controller<any>) {\n    const proto = controller.constructor.prototype;\n    const listenersMeta = (proto._listenersMeta || [] )as IListenerMeta[];\n    const listeners: IListener[] = [];\n\n    listenersMeta.push(\n        ...(controller as any).dynamicListeners\n    );\n\n    for (const listenerMeta of listenersMeta) {\n        let handler: (...args: any[]) => void;\n        let handlerArgs: HandlerArg[] = [];\n\n        if ( listenerMeta.methodName ) {\n            handler = (controller as any)[ listenerMeta.methodName ].bind(controller);\n\n            handlerArgs = findHandlerArguments(\n                controller, \n                listenerMeta.methodName\n            );    \n        }\n        else {\n            handler = listenerMeta.handler as (...args: any[]) => void;\n            handlerArgs = listenerMeta.handlerArgs as HandlerArg[];\n        }\n\n        const listener: IListener = {\n            eventType: listenerMeta.eventType,\n            selector: listenerMeta.selector,\n            handlerArgs,\n            handler\n        };\n        listeners.push(listener);\n    }\n\n    return listeners;\n}\n\n\nexport function findHandlerArguments(controller: Controller<any>, methodName: string): HandlerArg[] {\n    const proto = controller.constructor.prototype;\n\n    const handlersArguments: IHandlerArgs[] = proto._handlersArguments || [];\n    const handlerArgs = handlersArguments\n        .filter(someArgs =>\n            someArgs.methodName === methodName\n        )\n        .sort((a, b) =>\n            a.argumentIndex - b.argumentIndex\n        )\n        .map(someArgs =>\n            someArgs.eventPropertyPath\n        );\n    \n    return handlerArgs;\n}\n\nexport function isModelListener(listener: IListener) {\n    return (\n        typeof listener.selector === \"function\" &&\n        listener.selector.prototype instanceof Model\n    );\n}\n\nexport function isDomListener(listener: IListener) {\n    return !isModelListener(listener);\n}\n\ntype TViewConstructor<TModel extends Model> = new (...args: any[]) => View<TModel>;\ntype TControllerConstructor<TModel extends Model> = new (...args: any[]) => Controller<TModel>;\ntype TCreateController<TModel extends Model> = (model: TModel) => Controller<TModel>;\n\n/**\n * For every instance of ViewConstructor will created instance of CreateController\n * ```ts\n * // bind by classes\n * *@forView(MyView)\n * class MyController extends Controller<MyModel> {}\n * \n * // or create controller instance manually\n * *@forView(MyView, (model: MyModel) => \n *    new MyController(model, ...someOptions)\n * )\n * class MyController extends Controller<MyModel> {}\n * \n * ````\n * @param ViewConstructor for every this View\n * @param CreateController create this Controller\n */\nexport function forView<TModel extends Model>(\n    ViewConstructor: TViewConstructor<TModel>,\n    CreateController?: TCreateController<TModel>\n) {\n    return (ControllerClass: TControllerConstructor<TModel>) => {\n        mvcEvents.on(\"initView\", (domEvent: {view: any, model: any}) => {\n            if ( !(domEvent.view instanceof ViewConstructor) ) {\n                return;\n            }\n\n            createControllersForView(domEvent.view, domEvent.model);\n        });\n\n        function createControllersForView(view: View<any>, model: TModel) {\n\n            const originalEmit = model.emit;\n            model.emit = (eventType: string) => {\n                throw new Error(`${ControllerClass.name}: it is forbidden to emit any model event inside the controller constructor. Triggered \"${eventType}\"`);\n            };\n\n            const controller = CreateController ? \n                CreateController(model) :\n                new ControllerClass(model);\n            \n            const listenersMeta = getListeners(controller);\n            const domListenersMeta = listenersMeta.filter(isDomListener);\n            const domListeners: DOMListener[] = [];\n    \n            for (const meta of domListenersMeta) {\n                const domListener = new DOMListener({\n                    eventType: meta.eventType as keyof HTMLElementEventMap,\n                    selector: meta.selector as string | TViewConstructor<any>,\n                    handlerArgs: meta.handlerArgs,\n                    handler: meta.handler,\n                    view\n                });\n\n                domListener.listen(); \n                domListeners.push(domListener);\n            }\n\n            mvcEvents.once(\"destroyView\", (domEvent: {view: View<any>}) => {\n                if ( domEvent.view !== view ) {\n                    return;\n                }\n\n                for (const domListener of domListeners) {\n                    domListener.destroy();\n                }\n\n                controller.destroy();\n                domListeners.splice(0);\n            });\n            \n            model.emit = originalEmit;\n        }\n\n    };\n}\n","import { EventEmitter } from \"events\";\n\n/**\n * Base Model layer \n * @extends EventEmitter\n */\nexport abstract class Model extends EventEmitter {\n\n    /**\n     * Apply changes to model and emit changes to listeners.  \n     * @param props changes to apply on model\n     * @param options any options, who will transferred to all listeners\n     * @fires change\n     */\n    set(props: Partial<this>, options: any = {}) {\n        const changes: Partial<this> = {};\n        let hasChanges = false;\n\n        for (const key in props) {\n            const newValue = props[ key ] as this[ typeof key ];\n            const oldValue = this[ key ];\n\n            if ( newValue !== oldValue ) {\n                hasChanges = true;\n                this[ key ] = newValue;\n                changes[ key ] = newValue;\n            }\n        }\n\n        if ( hasChanges ) {\n            /**\n             * change event\n             *\n             * @event change\n             * @type {Partial<this>} changes\n             */\n            this.emit(\"change\", changes, options);\n        }\n    }\n\n    /**\n     * listen event\n     * @param event eventType, can be: \"change\"\n     * @param handler function, who will called on event\n     */\n    on(event: \"change\", handler: (changes: Partial<this>, options: any) => void): this;\n    on(event: string, handler: (...args: any[]) => void): this {\n        return super.on(event, handler);\n    }\n}","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Model } from \"./Model\";\nimport { mvcEvents } from \"./mvcEvents\";\n\n/**\n * Base View layer\n * @extends React.Component\n */\nexport abstract class View<TModel extends Model> extends React.Component<{model: TModel}> {\n    model!: TModel;\n\n    static ui: {\n        [elementName: string]: string\n    } = {};\n\n    /**\n     * HTML Template.\n     * Should be function who returns React template\n     * @param model current model\n     */\n    abstract template(model: TModel): JSX.Element;\n\n    constructor(props: Readonly<{model: TModel}>) {\n        super(props);\n\n        this.model = props.model;\n        this.listenModelChanges();\n\n        mvcEvents.emit(\"initView\", {\n            view: this,\n            model: this.model\n        });\n    }\n\n    private listenModelChanges() {\n        this.model.on(\"change\", (changes) => {\n            this.setState({changes});\n        });\n    }\n\n    render() {\n        return this.template(this.model);\n    }\n\n    componentDidMount() {\n        const rootEl = ReactDOM.findDOMNode(this) as any;\n        rootEl._view = this;\n    }\n\n    componentWillUnmount() {\n        // clear memory leaks\n\n        this.onDestroy();\n\n        mvcEvents.emit(\"destroyView\", {\n            view: this,\n            model: this.model\n        });\n\n        const rootEl = ReactDOM.findDOMNode(this) as any;\n        delete rootEl._view;\n    }\n\n    /**\n     * Detach listeners and fix any memory leaks.\n     * Should be any functions with clearing memory leaks.\n     */\n    onDestroy() {\n        // redefine me\n    }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {EventEmitter} from \"events\";\n\nimport {on, event, forView} from \"./Meta\";\nimport {Model} from \"./Model\";\nimport {View} from \"./View\";\nimport {Controller} from \"./Controller\";\n\nexport {\n    React,\n    ReactDOM,\n    EventEmitter,\n    Model,\n    View,\n    Controller,\n    on,\n    event,\n    forView\n};\n\nif ( typeof window !== \"undefined\" ) {\n    const windowObj = window as any;\n    windowObj.MVC = {\n        React,\n        ReactDOM,\n        EventEmitter,\n        Model,\n        View,\n        Controller,\n        on,\n        event,\n        forView\n    };\n\n    if ( !windowObj.React ) {\n        windowObj.React = React;\n    }\n    if ( !windowObj.ReactDOM ) {\n        windowObj.ReactDOM = ReactDOM;\n    }\n    if ( !windowObj.EventEmitter ) {\n        windowObj.EventEmitter = EventEmitter;\n    }\n}","import { EventEmitter } from \"events\";\n\nexport const mvcEvents = new EventEmitter();","import { Model } from \"../Model\";\n\nexport function getNearestModelByEvent(event: any, ModelConstructor: new () => Model): Model | null {\n    let parent: Element | null = event.target;\n\n    while ( parent ) {\n        const model = (parent as any)._view.model;\n        \n        if ( model instanceof ModelConstructor ) {\n            return model;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n}\n","\nexport function getPropertyFromEvent(\n    event: any, \n    currentTarget: any,\n    propertyPath: string[]\n) {\n    let eventPropertyValue: any = event;\n\n    for (const key of propertyPath) {\n        let nextValue = eventPropertyValue[ key ];\n\n        if ( key === \"currentTarget\" ) {\n            nextValue = currentTarget;\n        }\n        else if ( typeof nextValue === \"function\" ) {\n            nextValue = nextValue.bind(eventPropertyValue);\n        }\n        \n        eventPropertyValue = nextValue;\n    }\n\n    return eventPropertyValue;\n}\n","import { Model } from \"../Model\";\nimport { View } from \"../View\";\ntype TViewConstructor<TModel extends Model> = new (...args: any[]) => View<TModel>;\n\nexport function isValidTarget(params: {\n    componentEl: Element;\n    selector: string | TViewConstructor<any>;\n    target: Element;\n}): boolean {\n\n    if ( params.selector === \"window\" ) {\n        return true;\n    }\n\n    let parent: Element | null = params.target;\n    let insideComponent = false;\n    let insideSelector = false;\n    \n    let elemMatchesSelector!: (elem: Element) => boolean;\n    if ( typeof params.selector === \"string\" ) {\n        const selectorClassName = params.selector.replace(\".\", \"\");\n\n        elemMatchesSelector = (elem) =>\n            elem.classList.contains(selectorClassName);\n    }\n    else {\n        const ChildView = params.selector;\n        elemMatchesSelector = (elem) =>\n            (elem as any)._view instanceof ChildView;\n    }\n\n    while ( parent ) {\n        if ( elemMatchesSelector(parent) ) {\n            insideSelector = true;\n        }\n\n        if ( parent === params.componentEl ) {\n            insideComponent = true;\n            break;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return (\n        insideComponent && \n        insideSelector\n    );\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_events__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;"],"sourceRoot":""}