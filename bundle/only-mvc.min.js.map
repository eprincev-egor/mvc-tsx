{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"ReactDOM\"","webpack:///./lib/ControllerMeta.ts","webpack:///external \"React\"","webpack:///external \"EventEmitterModule\"","webpack:///./lib/index.ts","webpack:///./lib/Model.ts","webpack:///./lib/View.ts","webpack:///./lib/DOMEvents.ts","webpack:///./lib/DOMListener.ts","webpack:///./lib/utils/isValidTarget.ts","webpack:///./lib/utils/getPropertyFromEvent.ts","webpack:///./lib/utils/getNearestModelByEvent.ts","webpack:///./lib/Controller.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","findHandlerArguments","controller","methodName","constructor","_handlersArguments","filter","someArgs","sort","b","argumentIndex","map","eventPropertyPath","isModelListener","listener","selector","eventTypeOrModel","selectorOrModelEventType","eventType","test","Error","target","descriptor","_listenersMeta","meta","push","firstKey","secondKey","otherPropertyPath","handlerArgs","propertyPath","length","ModelConstructor","listenersMeta","listeners","dynamicListeners","listenerMeta","handler","React","ReactDOM","EventEmitter","on","arg","Model","View","Controller","windowObj","MVC","props","options","changes","hasChanges","newValue","this","emit","event","super","domEvents","DOMEvents","Component","model","createControllers","listenModelChanges","Controllers","controllers","controllersInstances","originalEmit","CurrentConstructor","ConstructorOrInstance","addController","setState","template","findDOMNode","_model","onDestroy","destroyListeners","destroy","view","getListeners","addListener","viewListeners","listenerIndex","indexOf","splice","isDomListener","domListener","DOMListener","listen","params","realEventType","fixFocusAndBlur","domHandler","onDOMEvent","document","addEventListener","removeEventListener","isValidEvent","args","getHandlerArgs","componentEl","isValidTarget","getNearestModelByEvent","getPropertyFromEvent","parent","insideComponent","insideSelector","selectorClassName","replace","classList","contains","parentElement","eventPropertyValue","modelListeners","initModelEvents","modelListener","removeListener"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,YAAaA,QAAQ,SAAUA,QAAQ,4BACpE,GAAqB,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,WAAY,QAAS,sBAAuBJ,OAChD,CACJ,IAAIM,EAAuB,iBAAZL,QAAuBD,EAAQG,QAAQ,YAAaA,QAAQ,SAAUA,QAAQ,uBAAyBH,EAAQD,EAAe,SAAGA,EAAY,MAAGA,EAAyB,oBACxL,IAAI,IAAIQ,KAAKD,GAAuB,iBAAZL,QAAuBA,QAAUF,GAAMQ,GAAKD,EAAEC,IAPxE,CASGC,QAAQ,SAASC,EAAgCC,EAAgCC,GACpF,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUb,QAGnC,IAAIC,EAASU,EAAiBE,GAAY,CACzCP,EAAGO,EACHC,GAAG,EACHd,QAAS,IAUV,OANAe,EAAQF,GAAUG,KAAKf,EAAOD,QAASC,EAAQA,EAAOD,QAASY,GAG/DX,EAAOa,GAAI,EAGJb,EAAOD,QA0Df,OArDAY,EAAoBK,EAAIF,EAGxBH,EAAoBM,EAAIP,EAGxBC,EAAoBO,EAAI,SAASnB,EAASoB,EAAMC,GAC3CT,EAAoBU,EAAEtB,EAASoB,IAClCG,OAAOC,eAAexB,EAASoB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhET,EAAoBe,EAAI,SAAS3B,GACX,oBAAX4B,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAexB,EAAS4B,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAexB,EAAS,aAAc,CAAE8B,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBO,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAASrC,GAChC,IAAIoB,EAASpB,GAAUA,EAAOgC,WAC7B,WAAwB,OAAOhC,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAW,EAAoBO,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRT,EAAoBU,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG5B,EAAoB+B,EAAI,GAIjB/B,EAAoBA,EAAoBgC,EAAI,G,gBClFrD3C,EAAOD,QAAUQ,G,6BCwKjB,SAAgBqC,EAAqBC,EAA6BC,GAe9D,OAdcD,EAAWE,YAAYP,UAEWQ,oBAAsB,IAEjEC,OAAOC,GACJA,EAASJ,aAAeA,GAE3BK,KAAK,CAAC/C,EAAGgD,IACNhD,EAAEiD,cAAgBD,EAAEC,eAEvBC,IAAIJ,GACDA,EAASK,mBAMrB,SAAgBC,EAAgBC,GAC5B,MACiC,iBAAtBA,EAASC,S,2IA1JxB,cACIC,EACAC,GAEA,IAAIC,EACAH,EAEJ,GAAiC,iBAArBC,EAAgC,CACxCE,EAAYF,EACZD,EAAWE,EAIX,IAFgC,aAAaE,KAAKJ,GAG9C,MAAM,IAAIK,MAAM,qBAAqBL,qEAIzCG,EAAYD,EACZF,EAAWC,EAGf,MAAO,CAACK,EAAalB,EAAoBmB,KAE/BD,EAAOE,iBACTF,EAAOE,eAAiB,IAG5B,MAAMC,EAAsB,CACxBN,YACAH,WACAZ,cAEJkB,EAAOE,eAAeE,KAAKD,KAenC,eACIE,EACAC,KAQGC,GAEH,MAAO,CAACP,EAAalB,EAAoBO,KAC/BW,EAAOhB,qBACTgB,EAAOhB,mBAAqB,IAGhC,MAAMwB,EAA4B,CAC9B1B,aACAO,gBACAE,kBAAmB,IAGvB,GAAyB,iBAAbc,EAAwB,CAChC,MAAMI,EAAyB,CAC3BJ,GAGCC,GACDG,EAAaL,KAAKE,GAEjBC,EAAkBG,QACnBD,EAAaL,QAASG,GAG1BC,EAAYjB,kBAAoBkB,MAE/B,CACD,MAAME,EAAmBN,EACzBG,EAAYjB,kBAAoBoB,EAGpCX,EAAOhB,mBAAmBoB,KAAKI,KAKvC,wBAA6B3B,GACzB,MACM+B,EADQ/B,EAAWE,YAAYP,UACR0B,gBAAkB,GACzCW,EAAyB,GAE/BD,EAAcR,QACNvB,EAAmBiC,kBAG3B,IAAK,MAAMC,KAAgBH,EAAe,CACtC,IAAII,EACAR,EAA4B,GAE3BO,EAAajC,YACdkC,EAAWnC,EAAoBkC,EAAajC,YAAaV,KAAKS,GAE9D2B,EAAc5B,EACVC,EACAkC,EAAajC,cAIjBkC,EAAUD,EAAaC,QACvBR,EAAcO,EAAaP,aAG/B,MAAMf,EAAsB,CACxBI,UAAWkB,EAAalB,UACxBH,SAAUqB,EAAarB,SACvBc,cACAQ,WAEJH,EAAUT,KAAKX,GAGnB,OAAOoB,GAIX,yBAkBA,oBAMA,yBAA8BpB,GAC1B,OAAQD,EAAgBC,K,cCjM5BzD,EAAOD,QAAUS,G,cCAjBR,EAAOD,QAAUU,G,irBCAjB,gBAUI,EAAAwE,QATJ,gBAUI,EAAAC,WATJ,aAUI,4EAVI,EAAAC,gBAER,aAYI,kEAZI,EAAAC,MAaJ,mEAbQ,EAAAC,OACZ,aAQI,qEARI,EAAAC,SACR,aAQI,oEARI,EAAAC,QACR,cAaA,GALI,0EARI,EAAAC,cAae,oBAAXlF,OAAyB,CACjC,MAAMmF,EAAYnF,OAClBmF,EAAUC,IAAM,CACZT,QACAC,WACAC,aAAA,EAAAA,aACAG,MAAA,EAAAA,MACAC,KAAA,EAAAA,KACAC,WAAA,EAAAA,WACAJ,GAAA,EAAAA,GACAC,IAAA,EAAAA,KAGEI,EAAUR,QACZQ,EAAUR,MAAQA,GAEhBQ,EAAUP,WACZO,EAAUP,SAAWA,GAEnBO,EAAUN,eACZM,EAAUN,aAAe,EAAAA,gB,6FCxCjC,aAMA,MAAsBG,UAAc,EAAAH,aAQhC,IAAIQ,EAAsBC,EAAe,IACrC,MAAMC,EAAyB,GAC/B,IAAIC,GAAa,EAEjB,IAAK,MAAM3D,KAAOwD,EAAO,CACrB,MAAMI,EAAWJ,EAAOxD,GAGnB4D,IAFYC,KAAM7D,KAGnB2D,GAAa,EACbE,KAAM7D,GAAQ4D,EACdF,EAAS1D,GAAQ4D,GAIpBD,GAODE,KAAKC,KAAK,SAAUJ,EAASD,GAUrC,GAAGM,EAAelB,GACd,OAAOmB,MAAMf,GAAGc,EAAOlB,IAzC/B,W,+mBCNA,gBACA,UAKMoB,EAAY,IAFlB,KAEsBC,WAMtB,MAAsBd,UAAmCN,EAAMqB,UAW3D,YAAYX,GACRQ,MAAMR,GAENK,KAAKO,MAAQZ,EAAMY,MACnBP,KAAKQ,oBACLR,KAAKS,qBAGD,oBACJ,MAAMC,EAAcV,KAAKW,YAAYX,KAAKO,OAC1CP,KAAKY,qBAAuB,GAE5B,MAAMC,EAAeb,KAAKO,MAAMN,KAChC,IAAIa,EAEJd,KAAKO,MAAMN,KAAQpC,IACf,MAAM,IAAIE,MAAM,GAAG+C,EAAmB3F,+FAA+F0C,OAGzI,IAAK,MAAMkD,KAAyBL,EAChC,GAAsC,mBAA1BK,EAAuC,CAC/CD,EAAqBC,EAErB,MAAMlE,EAAa,IAAIiE,EAAmBd,KAAKO,OAC/CH,EAAUY,cAAcnE,EAAYmD,MAEpCA,KAAKY,qBAAqBxC,KAAKvB,OAE9B,CACD,MAAMA,EAAakE,EACnBD,EAAqBjE,EAAWE,YAEhCqD,EAAUY,cAAcnE,EAAYmD,MAEpCA,KAAKY,qBAAqBxC,KAAKvB,GAIvCmD,KAAKO,MAAMN,KAAOY,EAGd,qBACJb,KAAKO,MAAMnB,GAAG,SAAWS,IACrBG,KAAKiB,SAAS,CAACpB,cAIvB,SACI,OAAOG,KAAKkB,SAASlB,KAAKO,OAG9B,oBACmBrB,EAASiC,YAAYnB,MAC7BoB,OAASpB,KAAKO,MAGzB,uBAGIP,KAAKqB,mBAEUnC,EAASiC,YAAYnB,MACtBoB,OAEdhB,EAAUkB,iBAAiBtB,MAE3B,IAAK,MAAMnD,KAAcmD,KAAKY,qBAC1B/D,EAAW0E,UAGfvB,KAAKY,qBAAuB,GAOhC,aAQA,YAAYL,GAIR,MAAO,IApGf,U,iGCVA,aACA,OAEA,gCACY,KAAA1B,UAA2B,GAEnC,cAAchC,EAA6B2E,GACvC,MAAM3C,EAAY,EAAA4C,aAAa5E,GAE/B,IAAK,MAAMY,KAAYoB,EACnBmB,KAAK0B,YAAYjE,EAAU+D,GAInC,iBAAiBA,GACb,MAAMG,EAAgB3B,KAAKnB,UAAU5B,OAAOQ,GACxCA,EAAS+D,OAASA,GAGtB,IAAK,MAAM/D,KAAYkE,EAAe,CAClClE,EAAS8D,UAET,MAAMK,EAAgB5B,KAAKnB,UAAUgD,QAAQpE,GAC7CuC,KAAKnB,UAAUiD,OAAOF,EAAe,IAIrC,YACJnE,EACA+D,GAEA,IAAM,EAAAO,cAActE,GAChB,OAGJ,MAAMuE,EAAc,IAAI,EAAAC,YAAY,CAChCpE,UAAWJ,EAASI,UACpBH,SAAUD,EAASC,SACnBc,YAAaf,EAASe,YACtBQ,QAASvB,EAASuB,QAClBwC,SAGJQ,EAAYE,SAEZlC,KAAKnB,UAAUT,KAAK4D,M,snBC/C5B,gBAGA,OACA,QACA,QAUA,oBAQI,YAAYG,GACRnC,KAAKoC,cAgEb,SAAyBvE,GACrB,GAAmB,SAAdA,EACD,MAAO,WAGX,GAAmB,UAAdA,EACD,MAAO,UAGX,OAAOA,EAzEkBwE,CAAgBF,EAAOtE,WAC5CmC,KAAKtC,SAAWyE,EAAOzE,SACvBsC,KAAKxB,YAAc2D,EAAO3D,YAC1BwB,KAAKhB,QAAUmD,EAAOnD,QACtBgB,KAAKwB,KAAOW,EAAOX,KAIvB,SACIxB,KAAKsC,WAAcpC,IACfF,KAAKuC,WAAWrC,IAEpBsC,SAASC,iBAAiBzC,KAAKoC,cAAepC,KAAKsC,YAGvD,UACIE,SAASE,oBAAoB1C,KAAKoC,cAAepC,KAAKsC,mBAC/CtC,KAAKwB,YACLxB,KAAKhB,eACLgB,KAAKsC,kBACLtC,KAAKxB,YAGR,WAAW0B,GACf,GAAKF,KAAK2C,aAAazC,GAAS,CAC5B,MAAM0C,EAAO5C,KAAK6C,eAAe3C,GACjCF,KAAKhB,WAAW4D,IAIhB,aAAa1C,GACjB,MAAM4C,EAAc5D,EAASiC,YAAYnB,KAAKwB,MAQ9C,OAN0B,EAAAuB,cAAc,CACpCD,cACApF,SAAUsC,KAAKtC,SACfM,OAAQkC,EAAMlC,SAMd,eAAekC,GAgBnB,OAfoBF,KAAKxB,YAAYlB,IAAKC,IACtC,GAAkC,mBAAtBA,EAAmC,CAC3C,MAAMoB,EAAmBpB,EACnBgD,EAAQ,EAAAyC,uBAAuB9C,EAAOvB,GAC5C,IAAM4B,EACF,MAAM,IAAIxC,MAAM,sBAAwBY,EAAiBxD,MAE7D,OAAOoF,EAIP,OADiB,EAAA0C,qBAAqB/C,EAAO3C,Q,qGC5E7D,yBAA8B4E,GAK1B,IAAIe,EAAyBf,EAAOnE,OAChCmF,GAAkB,EAClBC,GAAiB,EACrB,MAAMC,EAAoBlB,EAAOzE,SAAS4F,QAAQ,IAAK,IAEvD,KAAQJ,GAAS,CAKb,GAJKA,EAAOK,UAAUC,SAASH,KAC3BD,GAAiB,GAGhBF,IAAWf,EAAOW,YAAc,CACjCK,GAAkB,EAClB,MAGJD,EAASA,EAAOO,cAGpB,OACIN,GACAC,I,4GCzBR,gCAAqClD,EAAYzB,GAC7C,IAAIiF,EAA0BxD,EAE9B,IAAK,MAAM/D,KAAOsC,EACdiF,EAAqBA,EAAoBvH,GAG7C,OAAOuH,I,8GCNX,kCAAuCxD,EAAYvB,GAC/C,IAAIuE,EAAyBhD,EAAMlC,OAEnC,KAAQkF,GAAS,CACb,MAAM3C,EAAS2C,EAAe9B,OAE9B,GAAKb,aAAiB5B,EAClB,OAAO4B,EAGX2C,EAASA,EAAOO,cAGpB,OAAO,O,kGCdX,aAEA,mBAKI,YAAYlD,GAHJ,KAAAoD,eAAwB,GACxB,KAAA7E,iBAA0B,GAG9BkB,KAAKO,MAAQA,EACbP,KAAK4D,kBAGD,kBACJ,MACMD,EADY,EAAAlC,aAAazB,MACE/C,OAAOQ,GACpC,EAAAD,gBAAgBC,IAGpB,IAAK,MAAMA,KAAYkG,EAAgB,CACnC,MAAM9F,EAAYJ,EAASI,UACrBmB,EAAU,IAAI4D,KAChBnF,EAASuB,WAAW4D,IAGxB5C,KAAK2D,eAAevF,KAAK,CACrBP,YACAmB,YAEJgB,KAAKO,MAAMnB,GAAGvB,EAAWmB,IAUjC,GACInB,EACAH,EACAsB,GAEA,MAAMR,EAAc,EAAA5B,qBAAqBoD,KAAMhB,EAAQ7D,MACvD6D,EAAUA,EAAQ5C,KAAK4D,MAEvBA,KAAKlB,iBAAiBV,KAAK,CACvBP,YACAH,WACAsB,UACAR,gBAQR,UACIwB,KAAKqB,YAEL,IAAK,MAAMwC,KAAiB7D,KAAK2D,eAC7B3D,KAAKO,MAAMuD,eACPD,EAAchG,UACdgG,EAAc7E,gBAIfgB,KAAKO,MAQhB","file":"only-mvc.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ReactDOM\"), require(\"React\"), require(\"EventEmitterModule\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ReactDOM\", \"React\", \"EventEmitterModule\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"ReactDOM\"), require(\"React\"), require(\"EventEmitterModule\")) : factory(root[\"ReactDOM\"], root[\"React\"], root[\"EventEmitterModule\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Model } from \"./Model\";\nimport { Controller } from \"./Controller\";\n\ntype TModelConstructor = new(...args: any[]) => Model;\n\nexport interface IHandlerArgs {\n    methodName: string;\n    argumentIndex: number;\n    eventPropertyPath: TModelConstructor | string[]\n}\n\nexport interface IListenerMeta {\n    eventType: string;\n    selector: string | TModelConstructor;\n    methodName?: string;\n    handler?: (...args: any[]) => void;\n    handlerArgs?: HandlerArg[]; \n}\n\nexport type HandlerArg = string[] | TModelConstructor;\n\nexport interface IListener {\n    eventType: string;\n    selector: string | TModelConstructor;\n    handlerArgs: HandlerArg[];\n    handler: (...args: any[]) => void;\n}\n\n/**\n * Attach handler to View DOM events like are click, or model events.\n * @param eventTypeOrModel any DOM Event type or Model constructor\n * @param selectorOrModelEventType selector like are: \".my-class\" or model eventType  \n * Selectors like are \".a .b .c\" does not supported.\n */\nexport function on(\n    eventTypeOrModel: keyof HTMLElementEventMap | TModelConstructor, \n    selectorOrModelEventType: string\n) {\n    let eventType!: string;\n    let selector!: string | TModelConstructor;\n\n    if ( typeof eventTypeOrModel === \"string\" ) {\n        eventType = eventTypeOrModel;\n        selector = selectorOrModelEventType;\n\n        const selectorIsJustClassName = /^\\.[\\w-]+$/.test(selector);\n\n        if ( !selectorIsJustClassName ) {\n            throw new Error(`invalid selector \"${selector}\", selector should be just className like are \".some-class\"`);\n        }\n    }\n    else {\n        eventType = selectorOrModelEventType;\n        selector = eventTypeOrModel;\n    }\n\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\n\n        if ( !target._listenersMeta ) {\n            target._listenersMeta = [];\n        }\n        \n        const meta: IListenerMeta = {\n            eventType,\n            selector,\n            methodName\n        };\n        target._listenersMeta.push(meta);\n    };\n}\n\ntype KeyOfDOMEvent = (\n    keyof Event |\n    keyof MouseEvent |\n    keyof KeyboardEvent\n)\n/**\n * Get some value from event \n * @param firstKey keyof dom event object\n * @param secondKey keyof Event[firstKey], next step in property path.\n * @param otherPropertyPath other keys\n */\nexport function arg<T extends KeyOfDOMEvent | (new (...args: any[]) => Model)>(\n    firstKey?: T,\n    secondKey?: (\n        T extends keyof Event ?\n            (Event[T] extends Event[\"target\"] ? \n                keyof HTMLElement | keyof HTMLInputElement :\n                keyof Event[T]\n            ) :\n            never\n    ),\n    ...otherPropertyPath: string[]\n) {\n    return (target: any, methodName: string, argumentIndex: number) => {\n        if ( !target._handlersArguments ) {\n            target._handlersArguments = [];\n        }\n\n        const handlerArgs: IHandlerArgs = {\n            methodName,\n            argumentIndex,\n            eventPropertyPath: []\n        };\n\n        if ( typeof firstKey === \"string\" ) {\n            const propertyPath: string[] = [\n                firstKey as string\n            ];\n\n            if ( secondKey ) {\n                propertyPath.push(secondKey as string);\n            }\n            if ( otherPropertyPath.length ) {\n                propertyPath.push( ...otherPropertyPath );\n            }\n    \n            handlerArgs.eventPropertyPath = propertyPath;\n        }\n        else {\n            const ModelConstructor = firstKey as new (...args: any[]) => Model;\n            handlerArgs.eventPropertyPath = ModelConstructor;\n        }\n\n        target._handlersArguments.push(handlerArgs);\n        \n    };\n}\n\nexport function getListeners(controller: Controller<any>) {\n    const proto = controller.constructor.prototype;\n    const listenersMeta = (proto._listenersMeta || [] )as IListenerMeta[];\n    const listeners: IListener[] = [];\n\n    listenersMeta.push(\n        ...(controller as any).dynamicListeners\n    );\n\n    for (const listenerMeta of listenersMeta) {\n        let handler: (...args: any[]) => void;\n        let handlerArgs: HandlerArg[] = [];\n\n        if ( listenerMeta.methodName ) {\n            handler = (controller as any)[ listenerMeta.methodName ].bind(controller);\n\n            handlerArgs = findHandlerArguments(\n                controller, \n                listenerMeta.methodName\n            );    \n        }\n        else {\n            handler = listenerMeta.handler as (...args: any[]) => void;\n            handlerArgs = listenerMeta.handlerArgs as HandlerArg[];\n        }\n\n        const listener: IListener = {\n            eventType: listenerMeta.eventType,\n            selector: listenerMeta.selector,\n            handlerArgs,\n            handler\n        };\n        listeners.push(listener);\n    }\n\n    return listeners;\n}\n\n\nexport function findHandlerArguments(controller: Controller<any>, methodName: string): HandlerArg[] {\n    const proto = controller.constructor.prototype;\n\n    const handlersArguments: IHandlerArgs[] = proto._handlersArguments || [];\n    const handlerArgs = handlersArguments\n        .filter(someArgs =>\n            someArgs.methodName === methodName\n        )\n        .sort((a, b) =>\n            a.argumentIndex - b.argumentIndex\n        )\n        .map(someArgs =>\n            someArgs.eventPropertyPath\n        );\n    \n    return handlerArgs;\n}\n\nexport function isModelListener(listener: IListener) {\n    return (\n        typeof listener.selector !== \"string\"\n    );\n}\n\nexport function isDomListener(listener: IListener) {\n    return !isModelListener(listener);\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {EventEmitter} from \"events\";\n\nimport {on, arg} from \"./ControllerMeta\";\nimport {Model} from \"./Model\";\nimport {View} from \"./View\";\nimport {Controller} from \"./Controller\";\n\nexport {\n    React,\n    ReactDOM,\n    EventEmitter,\n    Model,\n    View,\n    Controller,\n    on,\n    arg\n};\n\nif ( typeof window !== \"undefined\" ) {\n    const windowObj = window as any;\n    windowObj.MVC = {\n        React,\n        ReactDOM,\n        EventEmitter,\n        Model,\n        View,\n        Controller,\n        on,\n        arg\n    };\n\n    if ( !windowObj.React ) {\n        windowObj.React = React;\n    }\n    if ( !windowObj.ReactDOM ) {\n        windowObj.ReactDOM = ReactDOM;\n    }\n    if ( !windowObj.EventEmitter ) {\n        windowObj.EventEmitter = EventEmitter;\n    }\n}","import { EventEmitter } from \"events\";\n\n/**\n * Base Model layer \n * @extends EventEmitter\n */\nexport abstract class Model extends EventEmitter {\n\n    /**\n     * Apply changes to model and emit changes to listeners.  \n     * @param props changes to apply on model\n     * @param options any options, who will transferred to all listeners\n     * @fires change\n     */\n    set(props: Partial<this>, options: any = {}) {\n        const changes: Partial<this> = {};\n        let hasChanges = false;\n\n        for (const key in props) {\n            const newValue = props[ key ] as this[ typeof key ];\n            const oldValue = this[ key ];\n\n            if ( newValue !== oldValue ) {\n                hasChanges = true;\n                this[ key ] = newValue;\n                changes[ key ] = newValue;\n            }\n        }\n\n        if ( hasChanges ) {\n            /**\n             * change event\n             *\n             * @event change\n             * @type {Partial<this>} changes\n             */\n            this.emit(\"change\", changes, options);\n        }\n    }\n\n    /**\n     * listen event\n     * @param event eventType, can be: \"change\"\n     * @param handler function, who will called on event\n     */\n    on(event: \"change\", handler: (changes: Partial<this>, options: any) => void): this;\n    on(event: string, handler: (...args: any[]) => void): this {\n        return super.on(event, handler);\n    }\n}","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Model } from \"./Model\";\nimport { Controller } from \"./Controller\";\nimport { DOMEvents } from \"./DOMEvents\";\n\nconst domEvents = new DOMEvents();\n\n/**\n * Base View layer\n * @extends React.Component\n */\nexport abstract class View<TModel extends Model> extends React.Component<{model: TModel}> {\n    model!: TModel;\n    protected controllersInstances!: Controller<TModel>[];\n    \n    /**\n     * HTML Template.\n     * Should be function who returns React template\n     * @param model current model\n     */\n    abstract template(model: TModel): JSX.Element;\n\n    constructor(props: Readonly<{model: TModel}>) {\n        super(props);\n\n        this.model = props.model;\n        this.createControllers();\n        this.listenModelChanges();\n    }\n\n    private createControllers() {\n        const Controllers = this.controllers(this.model);\n        this.controllersInstances = [];\n\n        const originalEmit = this.model.emit;\n        let CurrentConstructor: any;\n\n        this.model.emit = (eventType: string) => {\n            throw new Error(`${CurrentConstructor.name}: it is forbidden to emit any model event inside the controller constructor. Triggered \"${eventType}\"`);\n        };\n\n        for (const ConstructorOrInstance of Controllers) {\n            if ( typeof ConstructorOrInstance === \"function\" ) {\n                CurrentConstructor = ConstructorOrInstance;\n\n                const controller = new CurrentConstructor(this.model);\n                domEvents.addController(controller, this);\n            \n                this.controllersInstances.push(controller);\n            }\n            else {\n                const controller = ConstructorOrInstance;\n                CurrentConstructor = controller.constructor;\n                \n                domEvents.addController(controller, this);\n\n                this.controllersInstances.push(controller);\n            }\n        }\n\n        this.model.emit = originalEmit;\n    }\n\n    private listenModelChanges() {\n        this.model.on(\"change\", (changes) => {\n            this.setState({changes});\n        });\n    }\n\n    render() {\n        return this.template(this.model);\n    }\n\n    componentDidMount() {\n        const rootEl = ReactDOM.findDOMNode(this) as any;\n        rootEl._model = this.model;\n    }\n\n    componentWillUnmount() {\n        // clear memory leaks\n\n        this.onDestroy();\n\n        const rootEl = ReactDOM.findDOMNode(this) as any;\n        delete rootEl._model;\n\n        domEvents.destroyListeners(this);\n        \n        for (const controller of this.controllersInstances) {\n            controller.destroy();\n        }\n        \n        this.controllersInstances = [];\n    }\n\n    /**\n     * Detach listeners and fix any memory leaks.\n     * Should be any functions with clearing memory leaks.\n     */\n    onDestroy() {\n        // redefine me\n    }\n\n    /**\n     * Register controllers.  \n     * Should be function who returns list of Controllers constructors\n     */\n    controllers(model: TModel): (\n        (new (model: TModel) => Controller<TModel>) |\n        Controller<TModel>\n    )[] {\n        return [];\n    }\n}\n","import { Controller } from \"./Controller\";\nimport { View } from \"./View\";\nimport { DOMListener } from \"./DOMListener\";\nimport { getListeners, isDomListener, IListener } from \"./ControllerMeta\";\n\nexport class DOMEvents {\n    private listeners: DOMListener[] = [];\n    \n    addController(controller: Controller<any>, view: View<any>) {\n        const listeners = getListeners(controller);\n\n        for (const listener of listeners) {\n            this.addListener(listener, view);\n        }\n    }\n\n    destroyListeners(view: View<any>) {\n        const viewListeners = this.listeners.filter(listener =>\n            listener.view === view\n        );\n        \n        for (const listener of viewListeners) {\n            listener.destroy();\n            \n            const listenerIndex = this.listeners.indexOf(listener);\n            this.listeners.splice(listenerIndex, 1);\n        }\n    }\n\n    private addListener(\n        listener: IListener, \n        view: View<any>\n    ) {\n        if ( !isDomListener(listener) ) {\n            return;\n        }\n\n        const domListener = new DOMListener({\n            eventType: listener.eventType as keyof HTMLElementEventMap,\n            selector: listener.selector as string,\n            handlerArgs: listener.handlerArgs,\n            handler: listener.handler,\n            view\n        });\n\n        domListener.listen();\n\n        this.listeners.push(domListener);\n    }\n}\n\n","import * as ReactDOM from \"react-dom\";\nimport { View } from \"./View\";\nimport { Model } from \"./Model\";\nimport { isValidTarget } from \"./utils/isValidTarget\";\nimport { getPropertyFromEvent } from \"./utils/getPropertyFromEvent\";\nimport { getNearestModelByEvent } from \"./utils/getNearestModelByEvent\";\n\ninterface IDOMListenerParams {\n    eventType: keyof HTMLElementEventMap;\n    selector: string;\n    handlerArgs: ( string[] | (new (...args: any[]) => Model))[];\n    handler: (...args: any[]) => void,\n    view: View<any>;\n}\n\nexport class DOMListener {\n    view: View<any>;\n    private realEventType: keyof HTMLElementEventMap;\n    private selector: string;\n    private handlerArgs: ( string[] | (new (...args: any[]) => Model))[];\n    private handler: (...args: any[]) => void;\n    private domHandler!: (...args: any[]) => void;\n\n    constructor(params: IDOMListenerParams) {\n        this.realEventType = fixFocusAndBlur(params.eventType);\n        this.selector = params.selector;\n        this.handlerArgs = params.handlerArgs;\n        this.handler = params.handler;\n        this.view = params.view;\n\n    }\n\n    listen() {\n        this.domHandler = (event: Event) => {\n            this.onDOMEvent(event);\n        };\n        document.addEventListener(this.realEventType, this.domHandler);\n    }\n\n    destroy() {\n        document.removeEventListener(this.realEventType, this.domHandler);\n        delete this.view;\n        delete this.handler;\n        delete this.domHandler;\n        delete this.handlerArgs;\n    }\n\n    private onDOMEvent(event: Event) {\n        if ( this.isValidEvent(event) ) {\n            const args = this.getHandlerArgs(event);\n            this.handler(...args);\n        }\n    }\n\n    private isValidEvent(event: Event): boolean {\n        const componentEl = ReactDOM.findDOMNode(this.view) as any;\n\n        const thisIsValidTarget = isValidTarget({\n            componentEl,\n            selector: this.selector,\n            target: event.target as any,\n        });\n\n        return thisIsValidTarget;\n    }\n\n    private getHandlerArgs(event: Event) {\n        const args: any[] = this.handlerArgs.map((eventPropertyPath) => {\n            if ( typeof eventPropertyPath === \"function\" ) {\n                const ModelConstructor = eventPropertyPath;\n                const model = getNearestModelByEvent(event, ModelConstructor);\n                if ( !model ) {\n                    throw new Error(\"cannot find model: \" + ModelConstructor.name);\n                }\n                return model;\n            }\n            else {\n                const argValue = getPropertyFromEvent(event, eventPropertyPath);\n                return argValue;\n            }\n        });\n\n        return args;\n    }\n}\n\n\n// blur and focus do not bubbling\nfunction fixFocusAndBlur(eventType: keyof HTMLElementEventMap): keyof HTMLElementEventMap {\n    if ( eventType === \"blur\" ) {\n        return \"focusout\";\n    }\n\n    if ( eventType === \"focus\" ) {\n        return \"focusin\";\n    }\n\n    return eventType;\n}","\nexport function isValidTarget(params: {\n    componentEl: Element;\n    selector: string;\n    target: Element;\n}): boolean {\n    let parent: Element | null = params.target;\n    let insideComponent = false;\n    let insideSelector = false;\n    const selectorClassName = params.selector.replace(\".\", \"\");\n\n    while ( parent ) {\n        if ( parent.classList.contains(selectorClassName) ) {\n            insideSelector = true;\n        }\n\n        if ( parent === params.componentEl ) {\n            insideComponent = true;\n            break;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return (\n        insideComponent && \n        insideSelector\n    );\n}\n","\nexport function getPropertyFromEvent(event: any, propertyPath: string[]) {\n    let eventPropertyValue: any = event;\n\n    for (const key of propertyPath) {\n        eventPropertyValue = eventPropertyValue[ key ];\n    }\n\n    return eventPropertyValue;\n}\n","import { Model } from \"../Model\";\n\nexport function getNearestModelByEvent(event: any, ModelConstructor: new () => Model): Model | null {\n    let parent: Element | null = event.target;\n\n    while ( parent ) {\n        const model = (parent as any)._model;\n        \n        if ( model instanceof ModelConstructor ) {\n            return model;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n}\n","import { Model } from \"./Model\";\nimport { getListeners, isModelListener, findHandlerArguments } from \"./ControllerMeta\";\n\nexport abstract class Controller<TModel extends Model> {\n    protected model: Readonly<TModel>;\n    private modelListeners: any[] = [];\n    private dynamicListeners: any[] = [];\n\n    constructor(model: TModel) {\n        this.model = model;\n        this.initModelEvents();\n    }\n\n    private initModelEvents() {\n        const listeners = getListeners(this);\n        const modelListeners = listeners.filter(listener =>\n            isModelListener(listener)\n        );\n\n        for (const listener of modelListeners) {\n            const eventType = listener.eventType as any;\n            const handler = (...args: any[]) => {\n                listener.handler(...args);\n            };\n\n            this.modelListeners.push({\n                eventType,\n                handler\n            });\n            this.model.on(eventType, handler);\n        }\n    }\n\n    /**\n     * Attach handler to View DOM events like are click, or model events.\n     * @param eventType any DOM Event type\n     * @param selector \"model\" or simple class selector like are: \".my-class\". \n     * Selectors like are \".a .b .c\" does not supported.\n     */\n    on(\n        eventType: keyof HTMLElementEventMap,\n        selector: string,\n        handler: (...args: any[]) => void\n    ) {\n        const handlerArgs = findHandlerArguments(this, handler.name);\n        handler = handler.bind(this);\n        \n        this.dynamicListeners.push({\n            eventType,\n            selector,\n            handler,\n            handlerArgs\n        });\n    }\n\n    /**\n     * Destroy controller and clear memory.\n     * Detach all listeners.\n     */\n    destroy() {\n        this.onDestroy();\n        \n        for (const modelListener of this.modelListeners) {\n            this.model.removeListener(\n                modelListener.eventType, \n                modelListener.handler\n            );\n        }\n\n        delete this.model;\n    }\n\n    /**\n     * Detach listeners and fix any memory leaks.\n     * Should be any functions with clearing memory leaks.\n     * This method will be called from before .destroy()\n     */\n    onDestroy() {\n        // redefine me\n    }\n\n}"],"sourceRoot":""}