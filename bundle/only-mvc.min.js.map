{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"ReactDOM\"","webpack:///external \"EventEmitterModule\"","webpack:///external \"React\"","webpack:///./lib/Meta.ts","webpack:///./lib/mvcEvents.ts","webpack:///./lib/index.ts","webpack:///./lib/DOMListener.ts","webpack:///./lib/utils/isValidTarget.ts","webpack:///./lib/utils/getPropertyFromEvent.ts","webpack:///./lib/utils/getNearestModelByEvent.ts","webpack:///./lib/Model.ts","webpack:///./lib/View.ts","webpack:///./lib/Controller.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getListeners","controller","listenersMeta","constructor","_listenersMeta","listeners","push","dynamicListeners","listenerMeta","handler","handlerArgs","methodName","findHandlerArguments","listener","eventType","selector","_handlersArguments","filter","someArgs","sort","b","argumentIndex","map","eventPropertyPath","isModelListener","isDomListener","eventTypeOrModel","selectorOrModelEventType","test","Error","target","descriptor","meta","firstKey","secondKey","otherPropertyPath","propertyPath","length","ModelConstructor","ViewConstructor","CreateController","ControllerClass","mvcEvents","on","event","view","model","originalEmit","emit","domListenersMeta","domListeners","domListener","DOMListener","listen","once","destroy","splice","createControllersForView","EventEmitter","React","ReactDOM","arg","forView","Model","View","Controller","windowObj","MVC","params","this","realEventType","fixFocusAndBlur","domHandler","onDOMEvent","document","addEventListener","removeEventListener","isValidEvent","args","getHandlerArgs","componentEl","findDOMNode","isValidTarget","getHandlerArgument","getHandlerArgumentByModel","getPropertyFromEvent","getNearestModelByEvent","parent","insideComponent","insideSelector","selectorClassName","replace","classList","contains","parentElement","eventPropertyValue","nextValue","_model","props","options","changes","hasChanges","newValue","super","Component","listenModelChanges","setState","template","onDestroy","ui","modelListeners","initModelEvents","modelListener","removeListener"],"mappings":"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","file":"only-mvc.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ReactDOM\"), require(\"EventEmitterModule\"), require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ReactDOM\", \"EventEmitterModule\", \"React\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"ReactDOM\"), require(\"EventEmitterModule\"), require(\"React\")) : factory(root[\"ReactDOM\"], root[\"EventEmitterModule\"], root[\"React\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","import { Model } from \"./Model\";\nimport { Controller } from \"./Controller\";\nimport { View } from \"./View\";import { mvcEvents } from \"./mvcEvents\";\nimport { DOMListener } from \"./DOMListener\";\n;\n\ntype TModelConstructor = new(...args: any[]) => Model;\n\nexport interface IHandlerArgs {\n    methodName: string;\n    argumentIndex: number;\n    eventPropertyPath: TModelConstructor | string[]\n}\n\nexport interface IListenerMeta {\n    eventType: string;\n    selector: string | TModelConstructor;\n    methodName?: string;\n    handler?: (...args: any[]) => void;\n    handlerArgs?: HandlerArg[]; \n}\n\nexport type HandlerArg = string[] | TModelConstructor;\n\nexport interface IListener {\n    eventType: string;\n    selector: string | TModelConstructor;\n    handlerArgs: HandlerArg[];\n    handler: (...args: any[]) => void;\n}\n\n/**\n * Attach handler to View DOM events like are click, or model events.\n * ```js\n * class MyController extends Controller<MyModel> {\n * \n *     // listen dom event\n *     *@on(\"click\", MyView.ui.button)\n *     onClickButton() {\n *         // some action\n *     }\n * \n * }\n * ```\n * @param eventTypeOrModel any DOM Event type or Model constructor\n * @param selectorOrModelEventType selector like are: \".my-class\" or model eventType  \n * Selectors like are \".a .b .c\" does not supported.\n */\nexport function on(\n    eventTypeOrModel: keyof HTMLElementEventMap | TModelConstructor, \n    selectorOrModelEventType: string\n) {\n    let eventType!: string;\n    let selector!: string | TModelConstructor;\n\n    if ( typeof eventTypeOrModel === \"string\" ) {\n        eventType = eventTypeOrModel;\n        selector = selectorOrModelEventType;\n\n        const selectorIsJustClassName = /^\\.[\\w-]+$/.test(selector);\n\n        if ( !selectorIsJustClassName ) {\n            throw new Error(`invalid selector \"${selector}\", selector should be just className like are \".some-class\"`);\n        }\n    }\n    else {\n        eventType = selectorOrModelEventType;\n        selector = eventTypeOrModel;\n    }\n\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\n\n        if ( !target._listenersMeta ) {\n            target._listenersMeta = [];\n        }\n        \n        const meta: IListenerMeta = {\n            eventType,\n            selector,\n            methodName\n        };\n        target._listenersMeta.push(meta);\n    };\n}\n\ntype KeyOfDOMEvent = (\n    keyof Event |\n    keyof MouseEvent |\n    keyof KeyboardEvent |\n    keyof DragEvent\n)\n/**\n * Get some value from event object\n * ```ts\n * class MyController extends Controller<MyModel> {\n * \n *     *@on(\"change\", MyView.ui.input)\n *     onChangeInput(\n *         // get changed input value:\n *         // event.target.value\n *         *@arg(\"target\", \"value\") inputValue: string\n *     ) {\n *         // some action\n *     }\n * \n * }\n * ```\n * @param firstKey keyof dom event object\n * @param secondKey keyof Event[firstKey], next step in property path.\n * @param otherPropertyPath other keys\n */\nexport function arg<T extends KeyOfDOMEvent | (new (...args: any[]) => Model)>(\n    firstKey?: T,\n    secondKey?: (\n        T extends keyof Event ?\n            (Event[T] extends Event[\"target\"] ? \n                keyof HTMLElement | keyof HTMLInputElement :\n                keyof Event[T]\n            ) :\n            never\n    ),\n    ...otherPropertyPath: string[]\n) {\n    return (target: any, methodName: string, argumentIndex: number) => {\n        if ( !target._handlersArguments ) {\n            target._handlersArguments = [];\n        }\n\n        const handlerArgs: IHandlerArgs = {\n            methodName,\n            argumentIndex,\n            eventPropertyPath: []\n        };\n\n        if ( typeof firstKey === \"string\" ) {\n            const propertyPath: string[] = [\n                firstKey as string\n            ];\n\n            if ( secondKey ) {\n                propertyPath.push(secondKey as string);\n            }\n            if ( otherPropertyPath.length ) {\n                propertyPath.push( ...otherPropertyPath );\n            }\n    \n            handlerArgs.eventPropertyPath = propertyPath;\n        }\n        else {\n            const ModelConstructor = firstKey as new (...args: any[]) => Model;\n            handlerArgs.eventPropertyPath = ModelConstructor;\n        }\n\n        target._handlersArguments.push(handlerArgs);\n        \n    };\n}\n\nexport function getListeners(controller: Controller<any>) {\n    const proto = controller.constructor.prototype;\n    const listenersMeta = (proto._listenersMeta || [] )as IListenerMeta[];\n    const listeners: IListener[] = [];\n\n    listenersMeta.push(\n        ...(controller as any).dynamicListeners\n    );\n\n    for (const listenerMeta of listenersMeta) {\n        let handler: (...args: any[]) => void;\n        let handlerArgs: HandlerArg[] = [];\n\n        if ( listenerMeta.methodName ) {\n            handler = (controller as any)[ listenerMeta.methodName ].bind(controller);\n\n            handlerArgs = findHandlerArguments(\n                controller, \n                listenerMeta.methodName\n            );    \n        }\n        else {\n            handler = listenerMeta.handler as (...args: any[]) => void;\n            handlerArgs = listenerMeta.handlerArgs as HandlerArg[];\n        }\n\n        const listener: IListener = {\n            eventType: listenerMeta.eventType,\n            selector: listenerMeta.selector,\n            handlerArgs,\n            handler\n        };\n        listeners.push(listener);\n    }\n\n    return listeners;\n}\n\n\nexport function findHandlerArguments(controller: Controller<any>, methodName: string): HandlerArg[] {\n    const proto = controller.constructor.prototype;\n\n    const handlersArguments: IHandlerArgs[] = proto._handlersArguments || [];\n    const handlerArgs = handlersArguments\n        .filter(someArgs =>\n            someArgs.methodName === methodName\n        )\n        .sort((a, b) =>\n            a.argumentIndex - b.argumentIndex\n        )\n        .map(someArgs =>\n            someArgs.eventPropertyPath\n        );\n    \n    return handlerArgs;\n}\n\nexport function isModelListener(listener: IListener) {\n    return (\n        typeof listener.selector !== \"string\"\n    );\n}\n\nexport function isDomListener(listener: IListener) {\n    return !isModelListener(listener);\n}\n\ntype TViewConstructor<TModel extends Model> = new (...args: any[]) => View<TModel>;\ntype TControllerConstructor<TModel extends Model> = new (...args: any[]) => Controller<TModel>;\ntype TCreateController<TModel extends Model> = (model: TModel) => Controller<TModel>;\n\n/**\n * For every instance of ViewConstructor will created instance of CreateController\n * ```ts\n * // bind by classes\n * *@forView(MyView)\n * class MyController extends Controller<MyModel> {}\n * \n * // or create controller instance manually\n * *@forView(MyView, (model: MyModel) => \n *    new MyController(model, ...someOptions)\n * )\n * class MyController extends Controller<MyModel> {}\n * \n * ````\n * @param ViewConstructor for every this View\n * @param CreateController create this Controller\n */\nexport function forView<TModel extends Model>(\n    ViewConstructor: TViewConstructor<TModel>,\n    CreateController?: TCreateController<TModel>\n) {\n    return (ControllerClass: TControllerConstructor<TModel>) => {\n        mvcEvents.on(\"initView\", (event: {view: any, model: any}) => {\n            if ( !(event.view instanceof ViewConstructor) ) {\n                return;\n            }\n\n            createControllersForView(event.view, event.model);\n        });\n\n        function createControllersForView(view: View<any>, model: TModel) {\n\n            const originalEmit = model.emit;\n            model.emit = (eventType: string) => {\n                throw new Error(`${ControllerClass.name}: it is forbidden to emit any model event inside the controller constructor. Triggered \"${eventType}\"`);\n            };\n\n            const controller = CreateController ? \n                CreateController(model) :\n                new ControllerClass(model);\n            \n            const listenersMeta = getListeners(controller);\n            const domListenersMeta = listenersMeta.filter(isDomListener);\n            const domListeners: DOMListener[] = [];\n    \n            for (const meta of domListenersMeta) {\n                const domListener = new DOMListener({\n                    eventType: meta.eventType as keyof HTMLElementEventMap,\n                    selector: meta.selector as string,\n                    handlerArgs: meta.handlerArgs,\n                    handler: meta.handler,\n                    view\n                });\n\n                domListener.listen(); \n                domListeners.push(domListener);\n            }\n\n            mvcEvents.once(\"destroyView\", (event: {view: View<any>}) => {\n                if ( event.view !== view ) {\n                    return;\n                }\n\n                for (const domListener of domListeners) {\n                    domListener.destroy();\n                }\n\n                controller.destroy();\n                domListeners.splice(0);\n            });\n            \n            model.emit = originalEmit;\n        }\n\n    };\n}\n","import { EventEmitter } from \"events\";\n\nexport const mvcEvents = new EventEmitter();","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {EventEmitter} from \"events\";\n\nimport {on, arg, forView} from \"./Meta\";\nimport {Model} from \"./Model\";\nimport {View} from \"./View\";\nimport {Controller} from \"./Controller\";\n\nexport {\n    React,\n    ReactDOM,\n    EventEmitter,\n    Model,\n    View,\n    Controller,\n    on,\n    arg,\n    forView\n};\n\nif ( typeof window !== \"undefined\" ) {\n    const windowObj = window as any;\n    windowObj.MVC = {\n        React,\n        ReactDOM,\n        EventEmitter,\n        Model,\n        View,\n        Controller,\n        on,\n        arg,\n        forView\n    };\n\n    if ( !windowObj.React ) {\n        windowObj.React = React;\n    }\n    if ( !windowObj.ReactDOM ) {\n        windowObj.ReactDOM = ReactDOM;\n    }\n    if ( !windowObj.EventEmitter ) {\n        windowObj.EventEmitter = EventEmitter;\n    }\n}","import * as ReactDOM from \"react-dom\";\nimport { View } from \"./View\";\nimport { Model } from \"./Model\";\nimport { isValidTarget } from \"./utils/isValidTarget\";\nimport { getPropertyFromEvent } from \"./utils/getPropertyFromEvent\";\nimport { getNearestModelByEvent } from \"./utils/getNearestModelByEvent\";\n\ninterface IDOMListenerParams {\n    eventType: keyof HTMLElementEventMap;\n    selector: string;\n    handlerArgs: ( string[] | (new (...args: any[]) => Model))[];\n    handler: (...args: any[]) => void,\n    view: View<any>;\n}\n\nexport class DOMListener {\n    view: View<any>;\n    private realEventType: keyof HTMLElementEventMap;\n    private selector: string;\n    private handlerArgs: ( string[] | (new (...args: any[]) => Model))[];\n    private handler: (...args: any[]) => void;\n    private domHandler!: (...args: any[]) => void;\n\n    constructor(params: IDOMListenerParams) {\n        this.realEventType = fixFocusAndBlur(params.eventType);\n        this.selector = params.selector;\n        this.handlerArgs = params.handlerArgs;\n        this.handler = params.handler;\n        this.view = params.view;\n\n    }\n\n    listen() {\n        this.domHandler = (event: Event) => {\n            this.onDOMEvent(event);\n        };\n        document.addEventListener(this.realEventType, this.domHandler);\n    }\n\n    destroy() {\n        document.removeEventListener(this.realEventType, this.domHandler);\n        delete this.view;\n        delete this.handler;\n        delete this.domHandler;\n        delete this.handlerArgs;\n    }\n\n    private onDOMEvent(event: Event) {\n        if ( this.isValidEvent(event) ) {\n            const args = this.getHandlerArgs(event);\n            this.handler(...args);\n        }\n    }\n\n    private isValidEvent(event: Event): boolean {\n        const componentEl = ReactDOM.findDOMNode(this.view) as any;\n\n        const thisIsValidTarget = isValidTarget({\n            componentEl,\n            selector: this.selector,\n            target: event.target as any,\n        });\n\n        return thisIsValidTarget;\n    }\n\n    private getHandlerArgs(event: Event) {\n        const args: any[] = this.handlerArgs.map((eventPropertyPath) => \n            this.getHandlerArgument(event, eventPropertyPath) \n        );\n\n        return args;\n    }\n\n    private getHandlerArgument(\n        event: Event, \n        eventPropertyPath: string[] | (new (...args: any[]) => Model)\n    ) {\n        if ( typeof eventPropertyPath === \"function\" ) {\n            const ModelConstructor = eventPropertyPath;\n            const model = this.getHandlerArgumentByModel(event, ModelConstructor);\n            return model;\n        }\n        else {\n            const argValue = getPropertyFromEvent(event, eventPropertyPath);\n            return argValue;\n        }\n    }\n\n    private getHandlerArgumentByModel(\n        event: Event, \n        ModelConstructor: (new (...args: any[]) => Model)\n    ) {\n        const model = getNearestModelByEvent(event, ModelConstructor);\n        if ( !model ) {\n            throw new Error(\"cannot find model: \" + ModelConstructor.name);\n        }\n        return model;\n    }\n}\n\n\n// blur and focus do not bubbling\nfunction fixFocusAndBlur(eventType: keyof HTMLElementEventMap): keyof HTMLElementEventMap {\n    if ( eventType === \"blur\" ) {\n        return \"focusout\";\n    }\n\n    if ( eventType === \"focus\" ) {\n        return \"focusin\";\n    }\n\n    return eventType;\n}","\nexport function isValidTarget(params: {\n    componentEl: Element;\n    selector: string;\n    target: Element;\n}): boolean {\n    let parent: Element | null = params.target;\n    let insideComponent = false;\n    let insideSelector = false;\n    const selectorClassName = params.selector.replace(\".\", \"\");\n\n    while ( parent ) {\n        if ( parent.classList.contains(selectorClassName) ) {\n            insideSelector = true;\n        }\n\n        if ( parent === params.componentEl ) {\n            insideComponent = true;\n            break;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return (\n        insideComponent && \n        insideSelector\n    );\n}\n","\nexport function getPropertyFromEvent(event: any, propertyPath: string[]) {\n    let eventPropertyValue: any = event;\n\n    for (const key of propertyPath) {\n        let nextValue = eventPropertyValue[ key ];\n\n        if ( typeof nextValue === \"function\" ) {\n            nextValue = nextValue.bind(eventPropertyValue);\n        }\n        \n        eventPropertyValue = nextValue;\n    }\n\n    return eventPropertyValue;\n}\n","import { Model } from \"../Model\";\n\nexport function getNearestModelByEvent(event: any, ModelConstructor: new () => Model): Model | null {\n    let parent: Element | null = event.target;\n\n    while ( parent ) {\n        const model = (parent as any)._model;\n        \n        if ( model instanceof ModelConstructor ) {\n            return model;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n}\n","import { EventEmitter } from \"events\";\n\n/**\n * Base Model layer \n * @extends EventEmitter\n */\nexport abstract class Model extends EventEmitter {\n\n    /**\n     * Apply changes to model and emit changes to listeners.  \n     * @param props changes to apply on model\n     * @param options any options, who will transferred to all listeners\n     * @fires change\n     */\n    set(props: Partial<this>, options: any = {}) {\n        const changes: Partial<this> = {};\n        let hasChanges = false;\n\n        for (const key in props) {\n            const newValue = props[ key ] as this[ typeof key ];\n            const oldValue = this[ key ];\n\n            if ( newValue !== oldValue ) {\n                hasChanges = true;\n                this[ key ] = newValue;\n                changes[ key ] = newValue;\n            }\n        }\n\n        if ( hasChanges ) {\n            /**\n             * change event\n             *\n             * @event change\n             * @type {Partial<this>} changes\n             */\n            this.emit(\"change\", changes, options);\n        }\n    }\n\n    /**\n     * listen event\n     * @param event eventType, can be: \"change\"\n     * @param handler function, who will called on event\n     */\n    on(event: \"change\", handler: (changes: Partial<this>, options: any) => void): this;\n    on(event: string, handler: (...args: any[]) => void): this {\n        return super.on(event, handler);\n    }\n}","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Model } from \"./Model\";\nimport { mvcEvents } from \"./mvcEvents\";\n\n/**\n * Base View layer\n * @extends React.Component\n */\nexport abstract class View<TModel extends Model> extends React.Component<{model: TModel}> {\n    model!: TModel;\n\n    static ui: {\n        [elementName: string]: string\n    } = {};\n\n    /**\n     * HTML Template.\n     * Should be function who returns React template\n     * @param model current model\n     */\n    abstract template(model: TModel): JSX.Element;\n\n    constructor(props: Readonly<{model: TModel}>) {\n        super(props);\n\n        this.model = props.model;\n        this.listenModelChanges();\n\n        mvcEvents.emit(\"initView\", {\n            view: this,\n            model: this.model\n        });\n    }\n\n    private listenModelChanges() {\n        this.model.on(\"change\", (changes) => {\n            this.setState({changes});\n        });\n    }\n\n    render() {\n        return this.template(this.model);\n    }\n\n    componentDidMount() {\n        const rootEl = ReactDOM.findDOMNode(this) as any;\n        rootEl._model = this.model;\n    }\n\n    componentWillUnmount() {\n        // clear memory leaks\n\n        this.onDestroy();\n\n        mvcEvents.emit(\"destroyView\", {\n            view: this,\n            model: this.model\n        });\n\n        const rootEl = ReactDOM.findDOMNode(this) as any;\n        delete rootEl._model;\n    }\n\n    /**\n     * Detach listeners and fix any memory leaks.\n     * Should be any functions with clearing memory leaks.\n     */\n    onDestroy() {\n        // redefine me\n    }\n}\n","import { Model } from \"./Model\";\nimport { getListeners, isModelListener, findHandlerArguments } from \"./Meta\";\n\nexport abstract class Controller<TModel extends Model> {\n    protected model: Readonly<TModel>;\n    private modelListeners: any[] = [];\n    private dynamicListeners: any[] = [];\n\n    constructor(model: TModel) {\n        this.model = model;\n        this.initModelEvents();\n    }\n\n    private initModelEvents() {\n        const listeners = getListeners(this);\n        const modelListeners = listeners.filter(listener =>\n            isModelListener(listener)\n        );\n\n        for (const listener of modelListeners) {\n            const eventType = listener.eventType as any;\n            const handler = (...args: any[]) => {\n                listener.handler(...args);\n            };\n\n            this.modelListeners.push({\n                eventType,\n                handler\n            });\n            this.model.on(eventType, handler);\n        }\n    }\n\n    /**\n     * Attach handler to View DOM events like are click, or model events.\n     * @param eventType any DOM Event type\n     * @param selector \"model\" or simple class selector like are: \".my-class\". \n     * Selectors like are \".a .b .c\" does not supported.\n     */\n    on(\n        eventType: keyof HTMLElementEventMap,\n        selector: string,\n        handler: (...args: any[]) => void\n    ) {\n        const handlerArgs = findHandlerArguments(this, handler.name);\n        handler = handler.bind(this);\n        \n        this.dynamicListeners.push({\n            eventType,\n            selector,\n            handler,\n            handlerArgs\n        });\n    }\n\n    /**\n     * Destroy controller and clear memory.\n     * Detach all listeners.\n     */\n    destroy() {\n        this.onDestroy();\n        \n        for (const modelListener of this.modelListeners) {\n            this.model.removeListener(\n                modelListener.eventType, \n                modelListener.handler\n            );\n        }\n\n        delete this.model;\n    }\n\n    /**\n     * Detach listeners and fix any memory leaks.\n     * Should be any functions with clearing memory leaks.\n     * This method will be called from before .destroy()\n     */\n    onDestroy() {\n        // redefine me\n    }\n\n}"],"sourceRoot":""}